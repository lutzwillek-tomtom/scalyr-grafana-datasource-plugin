name: Release
# FIXME
#on:
#  push:
#    tags:
#      - [0-9]+.[0-9]+.[0-9]+
on: push
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: "16.x"
      # Ref: https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache path
        id: yarn-cache-path
        run: echo "::set-output name=path::$(yarn cache dir)"
      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-path.outputs.path }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # Not recommened to cache node_modules
      # Ref: https://github.com/actions/cache/blob/main/examples.md#node---npm
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build and test
        run: yarn build
      - uses: actions/setup-go@v3
        with:
          go-version: "1.16"
      # Ref: https://github.com/actions/cache/blob/main/examples.md#linux-1
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests and generate coverage report
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: coverage
      - uses: magefile/mage-action@v2
        with:
          version: latest
          args: buildAll
      - name: Sign plugin
        run: npx @grafana/toolkit plugin:sign
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      - name: Get version
        id: version
        run: |
          import json
          version = json.load(open('dist/plugin.json'))['info']['version']
          print(f'::set-output name=version::{version}')
        shell: python
      # FIXME
      #- name: Compare version and Github tag
      #  run: |
      #    [ "${{ steps.version.outputs.version }}" = "${GITHUB_REF#refs/tags/}" ] || { echo 'plugin version and github tag mismatch'; exit 1; }
      - name: Package plugin
        run: |
          mv dist sentinelone-dataset-datasource
          zip -r sentinelone-dataset-datasource-${{ steps.version.outputs.version }}.zip sentinelone-dataset-datasource
      - name: Validate plugin
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd plugin-validator/pkg/cmd/plugincheck
          go install
          popd
          plugincheck sentinelone-dataset-datasource-${{ steps.version.outputs.version }}.zip
      - name: Read changelog
        run: awk '/^## / {s++} s==1 {print} s==2 {exit}' CHANGELOG.md > release_changelog.md
# FIXME STOPPED
      - run: ls -l
      - run: cat release_changelog.md
#
#
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          body_path: ${{ steps.changelog.outputs.path }}
#          draft: true
#
#      - name: Add plugin to release
#        id: upload-plugin-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./${{ steps.metadata.outputs.archive }}
#          asset_name: ${{ steps.metadata.outputs.archive }}
#          asset_content_type: application/zip
#
#      - name: Add checksum to release
#        id: upload-checksum-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./${{ steps.metadata.outputs.archive-checksum }}
#          asset_name: ${{ steps.metadata.outputs.archive-checksum }}
#          asset_content_type: text/plain
#
#      - name: Publish to Grafana.com
#        run: |
#          echo A draft release has been created for your plugin. Please review and publish it. Then submit your plugin to grafana.com/plugins by opening a PR to https://github.com/grafana/grafana-plugin-repository with the following entry:
#          echo
#          echo '{ "id": "${{ steps.metadata.outputs.plugin-id }}", "type": "${{ steps.metadata.outputs.plugin-type }}", "url": "https://github.com/${{ github.repository }}", "versions": [ { "version": "${{ steps.metadata.outputs.plugin-version }}", "commit": "${{ github.sha }}", "url": "https://github.com/${{ github.repository }}", "download": { "any": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.metadata.outputs.plugin-version }}/${{ steps.metadata.outputs.archive }}", "md5": "${{ steps.package-plugin.outputs.checksum }}" } } } ] }' | jq .
